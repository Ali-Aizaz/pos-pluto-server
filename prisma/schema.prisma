generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id                     String      @id @unique @default(uuid()) @db.VarChar(36)
  name                   String      @db.VarChar(255)
  email                  String      @unique @db.VarChar(255)
  password               String      @db.VarChar(255)
  image                  String?     @db.VarChar(255)
  provider               Provider
  role                   Role        @default(STOREOWNER)
  resetPasswordToken     String?     @db.VarChar(255)
  lastCredentialChange   DateTime    @default(now()) @db.Timestamp(6)
  resetPasswordExpire    DateTime    @default(now()) @db.Timestamp(6)
  emailVerificationToken String?     @db.VarChar(255)
  isEmailVerified        Boolean     @default(false)
  createdAt              DateTime    @default(now()) @db.Timestamp(6)
  updatedAt              DateTime    @updatedAt @db.Timestamp(6)
  store                  Store[]
  Product                Product[]
  Inventory              Inventory[]
}

model Product {
  id          String        @id @unique @default(uuid()) @db.VarChar(36)
  name        String        @db.VarChar(255)
  price       Int           @db.Int
  image       String?       @db.VarChar(255)
  createdAt   DateTime      @default(now()) @db.Timestamp(6)
  updatedAt   DateTime      @updatedAt @db.Timestamp(6)
  categoryId  String        @db.VarChar(36)
  ownerId     String        @db.VarChar(36)
  count       Int           @default(1) @db.Int
  owner       User          @relation(fields: [ownerId], references: [id])
  category    Category      @relation(fields: [categoryId], references: [id])
  details     Json
  inventory   Inventory[]
  ProductData ProductData[]

  @@index([categoryId])
  @@index([ownerId])
}

model ProductData {
  id        String  @id @unique @default(uuid()) @db.VarChar(36)
  name      String  @db.VarChar(255)
  productId String  @db.VarChar(36)
  product   Product @relation(fields: [productId], references: [id])

  @@index([productId])
}

model Category {
  id        String    @id @unique @default(uuid()) @db.VarChar(36)
  name      String    @db.VarChar(255)
  createdAt DateTime  @default(now()) @db.Timestamp(6)
  updatedAt DateTime  @updatedAt @db.Timestamp(6)
  Product   Product[]
}

model Inventory {
  id        String      @id @unique @default(uuid()) @db.VarChar(36)
  count     Int         @default(1) @db.Int
  state     State       @default(SOLD)
  createdAt DateTime    @default(now()) @db.Timestamp(6)
  updatedAt DateTime    @updatedAt @db.Timestamp(6)
  ownerId   String      @db.VarChar(36)
  owner     User        @relation(fields: [ownerId], references: [id])
  productId String      @db.VarChar(36)
  product   Product     @relation(fields: [productId], references: [id])
  parent    Inventory?  @relation(name: "Returns", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  returns   Inventory[] @relation(name: "Returns")
  parentId  String?     @db.VarChar(36)

  @@index([productId])
  @@index([ownerId])
  @@index([parentId])
}

model Store {
  id          String   @id @unique @default(uuid()) @db.VarChar(36)
  name        String   @db.VarChar(255)
  description String   @db.VarChar(255)
  image       String?  @db.VarChar(255)
  createdAt   DateTime @default(now()) @db.Timestamp(6)
  updatedAt   DateTime @updatedAt @db.Timestamp(6)
  ownerId     String   @db.VarChar(36)
  owner       User     @relation(fields: [ownerId], references: [id])

  @@index([ownerId])
}

enum State {
  SOLD
  RETURNED
  WARRANTY
}

enum Provider {
  EMAIL
  GOOGLE
}

enum Role {
  USER
  STOREOWNER
  ADMIN
}

enum Type {
  NUMBER
  STRING
  BOOLEAN
}
