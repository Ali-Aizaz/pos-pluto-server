generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "mongodb"
  url      = env("MONGO_URI") // uses connection pooling
}

model User {
  id                     String   @id @default(auto()) @map("_id") @db.ObjectId
  name                   String
  email                  String   @unique
  password               String
  imageUrl               String?
  provider               Provider @default(EMAIL)
  role                   Role     @default(STOREOWNER)
  resetPasswordToken     String?
  lastCredentialChange   DateTime @default(now()) @db.Timestamp
  resetPasswordExpire    DateTime @default(now()) @db.Timestamp
  emailVerificationToken String?
  isEmailVerified        Boolean  @default(false)
  createdAt              DateTime @default(now()) @db.Timestamp
  updatedAt              DateTime @updatedAt @db.Timestamp
  storeId                String   @db.ObjectId
  store                  Store    @relation(fields: [storeId], references: [id])
}

model Product {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  imageUrl     String?
  createdAt    DateTime    @default(now()) @db.Timestamp
  updatedAt    DateTime    @updatedAt @db.Timestamp
  categoryName String
  category     Category    @relation(fields: [categoryName], references: [name])
  details      Json
  inventory    Inventory[]
  sold         Sold[]
  returned     Returned[]
  warranty     Warranty[]

  @@index([categoryName])
}

model Category {
  id           String    @id @default(auto()) @map("_id") @db.ObjectId
  name         String    @unique
  createdAt    DateTime  @default(now()) @db.Timestamp
  updatedAt    DateTime  @updatedAt @db.Timestamp
  product      Product[]
  categoryData String[]
}

model Inventory {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  count     Int      @default(1) @db.Int
  price     Int      @db.Int
  warranty  Int      @db.Int
  createdAt DateTime @default(now()) @db.Timestamp
  updatedAt DateTime @updatedAt @db.Timestamp
  storeId   String   @db.ObjectId
  store     Store    @relation(fields: [storeId], references: [id])
  productId String   @db.ObjectId
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([productId, storeId])
  @@index([productId])
  @@index([storeId])
}

model Sold {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  count         Int      @default(1) @db.Int
  price         Int      @db.Int
  warranty      Int      @db.Int
  createdAt     DateTime @default(now()) @db.Timestamp
  updatedAt     DateTime @updatedAt @db.Timestamp
  storeId       String   @db.ObjectId
  store         Store    @relation(fields: [storeId], references: [id])
  productId     String   @db.ObjectId
  product       Product  @relation(fields: [productId], references: [id])
  customerName  String?
  customerPhone String?
}

model Returned {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  count         Int      @default(1) @db.Int
  price         Int      @db.Int
  warranty      Int      @db.Int
  createdAt     DateTime @default(now()) @db.Timestamp
  updatedAt     DateTime @updatedAt @db.Timestamp
  storeId       String   @db.ObjectId
  store         Store    @relation(fields: [storeId], references: [id])
  productId     String   @db.ObjectId
  product       Product  @relation(fields: [productId], references: [id])
  customerName  String?
  customerPhone String?
}

model Warranty {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  count         Int      @default(1) @db.Int
  price         Int      @db.Int
  warranty      Int      @db.Int
  createdAt     DateTime @default(now()) @db.Timestamp
  updatedAt     DateTime @updatedAt @db.Timestamp
  storeId       String   @db.ObjectId
  store         Store    @relation(fields: [storeId], references: [id])
  productId     String   @db.ObjectId
  product       Product  @relation(fields: [productId], references: [id])
  customerName  String?
  customerPhone String?
}

model Store {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  imageUrl    String?
  createdAt   DateTime    @default(now()) @db.Timestamp
  updatedAt   DateTime    @updatedAt @db.Timestamp
  user        User[]
  inventory   Inventory[]
  sold        Sold[]
  returned    Returned[]
  warranty    Warranty[]
}

enum Provider {
  EMAIL
  GOOGLE
}

enum Role {
  STOREEMPLOYEE
  STOREOWNER
  ADMIN
}

enum Type {
  NUMBER
  STRING
  BOOLEAN
}
