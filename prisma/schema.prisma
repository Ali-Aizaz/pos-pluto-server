generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id                     String   @id @unique @default(uuid())
  name                   String   @db.VarChar(255)
  email                  String   @unique @db.VarChar(255)
  password               String   @db.VarChar(255)
  imageUrl               String?  @db.VarChar(255)
  provider               Provider @default(EMAIL)
  role                   Role     @default(STOREOWNER)
  resetPasswordToken     String?  @db.VarChar(255)
  lastCredentialChange   DateTime @default(now()) @db.Timestamp(6)
  resetPasswordExpire    DateTime @default(now()) @db.Timestamp(6)
  emailVerificationToken String?  @db.VarChar(255)
  isEmailVerified        Boolean  @default(false)
  createdAt              DateTime @default(now()) @db.Timestamp(6)
  updatedAt              DateTime @updatedAt @db.Timestamp(6)
  storeId                String   @db.Uuid
  store                  Store    @relation(fields: [storeId], references: [id])
}

model Product {
  id           String      @id @unique @default(uuid()) @db.Uuid
  name         String      @db.VarChar(255)
  price        Int         @db.Integer
  imageUrl     String?     @db.VarChar(255)
  createdAt    DateTime    @default(now()) @db.Timestamp(6)
  updatedAt    DateTime    @updatedAt @db.Timestamp(6)
  categoryName String      @db.VarChar(255)
  category     Category    @relation(fields: [categoryName], references: [name])
  details      Json
  inventory    Inventory[]
  sold         Sold[]
  returned     Returned[]
  warranty     Warranty[]

  @@index([categoryName])
}

model Category {
  id           String    @id @unique @default(uuid()) @db.Uuid
  name         String    @unique @db.VarChar(255)
  createdAt    DateTime  @default(now()) @db.Timestamp(6)
  updatedAt    DateTime  @updatedAt @db.Timestamp(6)
  product      Product[]
  categoryData String[]
}

model Inventory {
  id        String   @id @unique @default(uuid()) @db.Uuid
  count     Int      @default(1) @db.Integer
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
  storeId   String   @db.Uuid
  store     Store    @relation(fields: [storeId], references: [id])
  productId String   @db.Uuid
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([productId, storeId])
  @@index([productId, storeId])
  @@index([productId])
  @@index([storeId])
}

model Sold {
  id        String   @id @unique @default(uuid()) @db.Uuid
  count     Int      @default(1) @db.Integer
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
  storeId   String   @db.Uuid
  store     Store    @relation(fields: [storeId], references: [id])
  productId String   @db.Uuid
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([productId, storeId])
  @@index([productId, storeId])
  @@index([productId])
  @@index([storeId])
}

model Returned {
  id        String   @id @unique @default(uuid()) @db.Uuid
  count     Int      @default(1) @db.Integer
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
  storeId   String   @db.Uuid
  store     Store    @relation(fields: [storeId], references: [id])
  productId String   @db.Uuid
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([productId, storeId])
  @@index([productId, storeId])
  @@index([productId])
  @@index([storeId])
}

model Warranty {
  id        String   @id @unique @default(uuid()) @db.Uuid
  count     Int      @default(1) @db.Integer
  createdAt DateTime @default(now()) @db.Timestamp(6)
  updatedAt DateTime @updatedAt @db.Timestamp(6)
  storeId   String   @db.Uuid
  store     Store    @relation(fields: [storeId], references: [id])
  productId String   @db.Uuid
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([productId, storeId])
  @@index([productId, storeId])
  @@index([productId])
  @@index([storeId])
}

model Store {
  id          String      @id @unique @default(uuid()) @db.Uuid
  name        String      @db.VarChar(255)
  description String      @db.VarChar(255)
  imageUrl    String?     @db.VarChar(255)
  createdAt   DateTime    @default(now()) @db.Timestamp(6)
  updatedAt   DateTime    @updatedAt @db.Timestamp(6)
  user        User[]
  inventory   Inventory[]
  sold        Sold[]
  returned    Returned[]
  warranty    Warranty[]
}

enum Provider {
  EMAIL
  GOOGLE
}

enum Role {
  STOREEMPLOYEE
  STOREOWNER
  ADMIN
}

enum Type {
  NUMBER
  STRING
  BOOLEAN
}
